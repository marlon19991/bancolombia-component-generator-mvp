const BancolombiaComponentGenerator = require('./src/index');

/**
 * Demostraci√≥n R√°pida del Sistema RAG Bancolombia
 * Muestra los casos m√°s impresionantes en menos de 30 segundos
 */
class QuickDemo {
  constructor() {
    this.generator = new BancolombiaComponentGenerator();
  }

  async run() {
    console.log('‚ö° DEMOSTRACI√ìN R√ÅPIDA - SISTEMA RAG BANCOLOMBIA');
    console.log('üöÄ Generaci√≥n inteligente de componentes en espa√±ol');
    console.log('='.repeat(60));
    
    // Inicializar sistema
    console.log('\nüîß Inicializando sistema...');
    const startInit = Date.now();
    await this.generator.initialize();
    const initTime = Date.now() - startInit;
    console.log(`‚úÖ Sistema listo en ${initTime}ms`);
    
    // Casos m√°s impresionantes
    const showcases = [
      {
        title: 'üìù FORMULARIO DE LOGIN BANCARIO',
        prompt: 'campo de email obligatorio, campo de contrase√±a y bot√≥n de ingresar',
        highlight: 'Genera 3 componentes desde una descripci√≥n natural'
      },
      {
        title: 'üîî NOTIFICACI√ìN DE TRANSFERENCIA',
        prompt: 'alerta de √©xito que diga transferencia completada exitosamente',
        highlight: 'Detecta autom√°ticamente el tipo y mensaje'
      },
      {
        title: 'üÉè TARJETA DE PRODUCTO BANCARIO',
        prompt: 'tarjeta clickeable de cuenta de ahorros con sombra alta',
        highlight: 'Entiende propiedades visuales complejas'
      },
      {
        title: '‚úÖ MODAL DE CONFIRMACI√ìN',
        prompt: 'modal de confirmaci√≥n para transferencia de dinero',
        highlight: 'Contexto bancario espec√≠fico reconocido'
      },
      {
        title: '‚òëÔ∏è T√âRMINOS Y CONDICIONES',
        prompt: 'checkbox para t√©rminos y condiciones obligatorio',
        highlight: 'Detecta estados y casos de uso comunes'
      }
    ];

    let totalTime = 0;
    let successCount = 0;

    for (const showcase of showcases) {
      console.log(`\n${showcase.title}`);
      console.log(`üí¨ "${showcase.prompt}"`);
      console.log(`üéØ ${showcase.highlight}`);
      
      const start = Date.now();
      try {
        const result = await this.generator.generate(showcase.prompt);
        const duration = Date.now() - start;
        totalTime += duration;
        
        if (result.success) {
          successCount++;
          console.log(`‚úÖ Generado en ${duration}ms - Confianza: ${(result.confidence * 100).toFixed(1)}%`);
          
          // Mostrar c√≥digo generado de forma compacta
          const code = result.finalCode?.html || '';
          const compactCode = code
            .replace(/\n\s*/g, ' ')
            .replace(/\s+/g, ' ')
            .trim();
          
          if (compactCode.length > 80) {
            console.log(`üìÑ ${compactCode.substring(0, 77)}...`);
          } else {
            console.log(`üìÑ ${compactCode}`);
          }
        } else {
          console.log(`‚ùå Error: ${result.error}`);
        }
      } catch (error) {
        console.log(`‚ùå Error: ${error.message}`);
      }
    }

    // Resumen final
    console.log('\nüìä RESUMEN DE LA DEMOSTRACI√ìN');
    console.log('='.repeat(60));
    console.log(`‚úÖ Casos exitosos: ${successCount}/${showcases.length} (${((successCount/showcases.length)*100).toFixed(1)}%)`);
    console.log(`‚è±Ô∏è Tiempo total: ${totalTime}ms`);
    console.log(`üìà Tiempo promedio: ${(totalTime/showcases.length).toFixed(1)}ms`);
    console.log(`üöÄ Velocidad: ${(showcases.length * 1000 / totalTime).toFixed(1)} generaciones/segundo`);
    
    console.log('\nüéâ CAPACIDADES DEMOSTRADAS:');
    console.log('   ‚Ä¢ ‚úÖ Comprensi√≥n de lenguaje natural en espa√±ol');
    console.log('   ‚Ä¢ ‚úÖ Detecci√≥n inteligente de tipos de componentes');
    console.log('   ‚Ä¢ ‚úÖ Extracci√≥n autom√°tica de propiedades');
    console.log('   ‚Ä¢ ‚úÖ Generaci√≥n de c√≥digo HTML v√°lido');
    console.log('   ‚Ä¢ ‚úÖ Sintaxis oficial de Bancolombia');
    console.log('   ‚Ä¢ ‚úÖ Rendimiento sub-milisegundo');
    
    console.log('\nüöÄ PR√ìXIMOS PASOS:');
    console.log('   üìã Prueba completa: node demo-generator-expanded.js --all');
    console.log('   üéÆ Casos reales: node test-interactive.js');
    console.log('   üí¨ Modo interactivo: node src/index.js');
    console.log('   üìö Documentaci√≥n: SISTEMA-RAG-COMPLETO.md');
    
    console.log('\n‚ö° ¬°Sistema RAG listo para producci√≥n!');
  }
}

// Ejecutar demostraci√≥n
async function main() {
  const demo = new QuickDemo();
  await demo.run();
}

if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Error en demostraci√≥n r√°pida:', error);
    process.exit(1);
  });
}

module.exports = QuickDemo; 